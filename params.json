{"name":"zuzel-atlassian-crowd","tagline":"A Meteor package for Atlassian Crowd","body":"## A Meteor package for the Atlassian Crowd.\r\n\r\nTo add:\r\n<pre>\r\nmeteor add zuzel:atlassian-crowd\r\n</pre>\r\n\r\n## Documentation\r\n\r\nAccess the module in js with <code>AtlassianCrowd.instance()</code>.\r\n\r\nYou can create an instance with different options by <code>new AtlassianCrowd(YOUR_OPTIONS)</code>.\r\n\r\nThe package exposes <code>Meteor.loginWithCrowd(username, password, callback)</code> method for login. This method automatically creates a new Meteor user if not exists.\r\n\r\n## Config\r\n\r\n<code>ATLASSIAN_CROWD_CONFIG</code> namespace is reserved for default Crowd configuration.\r\nDefault Crowd configuration is required if you want to use <code>Meteor.loginWithCrowd</code>. Define it somewere on a server. Example:\r\n<pre>\r\n\tMeteor.startup(function () {\r\n            ATLASSIAN_CROWD_CONFIG.crowd = {\r\n                \"base\": \"http://crowd_server:8059/crowd/\"\r\n            };\r\n            ATLASSIAN_CROWD_CONFIG.application = {\r\n                \"name\": \"username\",\r\n                \"password\": \"password\"\r\n            };\r\n\t});\r\n</pre>\r\n\r\n## Example Client\r\n<pre>\r\n\tvar username = form.find(\"#username\").val()\r\n        var pass = form.find(\"#password\").val()\r\n\tMeteor.loginWithCrowd(username, pass, callback);\r\n</pre>\r\n## Example Server\r\n<pre>\r\n\tvar findCrowdUsersCallback = function (error, response) {\r\n        \tif (response) {\r\n        \t    console.error(response);\r\n        \t} else {\r\n        \t    console.error(error);\r\n        \t}\r\n\t};\r\n\r\n\tAtlassianCrowd.instance().search(\"user\", \"name=*\", findCrowdUsersCallback);\r\n</pre>\r\n\r\n## API ##\r\n\r\n#### Testing Configuration and Connectivity ####\r\nA simple function to check connectivity to Atlassian Crowd.\r\n\r\nping(callback)\r\n\r\n* callback Function (err, res)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().ping(function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res)\r\n  }\r\n});\r\n```\r\n\r\n#### Search Users or Groups ####\r\nUses the Crowd Query Language  \r\nSee [Crowd Query Language Documenation](https://developer.atlassian.com/display/CROWDDEV/Crowd+Query+Language) for more details  \r\nsearch(entityType, query, callback)\r\n\r\n* entityType String 'user' or 'group'\r\n* query String Crowd Query\r\n\r\n#### Search Users #####\r\n```javascript\r\nAtlassianCrowd.instance().search('user', 'firstName=\"test*\"', function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n```\r\n\r\n##### Search Groups #####\r\n```javascript\r\nAtlassianCrowd.instance().search('group', 'name=\"*test*\"', function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n```\r\n\r\n### User Related Functions ###\r\nHere you can find utilities for Managing, Creating, Removing, Users as well as Changing Passwords, and Basic Authentication (NON SSO).\r\n\r\n#### Finding a User by Username ####\r\nuser.find(userrname, callback)\r\n\r\n* username String\r\n* callback Function (err, res)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().user.find('user', function(err, res) {\r\n  if(err) { \r\n    throw err;\r\n   }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n```\r\n\r\n#### Checking if User is Active ####\r\nuser.active(username, callback)  \r\n\r\n* username String\r\n* callback Function (err, res)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().user.active('user', function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res.toString());\r\n  }\r\n});\r\n```\r\n\r\n#### Creating a User ####\r\nuser.create(firstname, lastname, displayname, email, username, password, callback)  \r\n\r\n* firstname String\r\n* lastname String\r\n* displayname String\r\n* email String\r\n* username String\r\n* password String\r\n* callback Function (err)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().user.create('Test', 'User', 'Test User', 'test@foo.bar', 'testuser', 'abc123', function(err) {\r\n  if(err) { \r\n    throw err;\r\n  }\r\n  else {\r\n    console.log('Success')\r\n  }\r\n});\r\n```\r\n\r\n#### Removing a User ####\r\nuser.remove(username, callback)  \r\n\r\n* username String\r\n* callback Function (err)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().user.remove('testuser', function(err) {\r\n  if(err) { \r\n    throw err;\r\n  }\r\n  else {\r\n    console.log('Success')\r\n  }\r\n});\r\n```\r\n\r\n#### List a Users Group Membership ####\r\nuser.groups(username, callback)  \r\n\r\n* username String\r\n* callback Function (err, res)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().user.groups('testuser', function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n```\r\n\r\n#### List a Users Attributes ####\r\nuser.attributes(username, callback)\r\n\r\n* username String\r\n* callback Function (err, res) \r\n   \r\n```javascript\r\nAtlassianCrowd.instance().user.attributes('testuser', function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n```\r\n\r\n#### Set a New Attribute to a User ####\r\nuser.setAttributes(username, name, values, callback)\r\n\r\n* username String\r\n* name String\r\n* values String **or** Array\r\n* callback Function (err, res)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().user.removeAttribute('testuser', 'attributeName', function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n```\r\n\r\n#### Remove an Attribute From a User ####\r\nuser.removeAttribute(username, name, values, callback)\r\n\r\n* username String\r\n* name String\r\n* callback Function (err, res)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().user.attributes('testuser', 'attributeName', 'attributeValue', function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n```\r\n\r\n#### User Authentication (NON SSO) ####\r\nuser.authenticate(username, password, callback)  \r\n\r\n* username String\r\n* password String\r\n* callback Function (err, res)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().user.authenticate('testuser', 'abc123', function(err, res) {\r\n  if(err) { \r\n    throw err;\r\n   }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n```\r\n\r\n#### Changing a Users Password ####\r\nuser.changepassword(username, newpassword)\r\n\r\n* username String\r\n* newpassword String\r\n* callback Function (err)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().user.changepassword('testuser', 'newpass', function (err) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log('Success');\r\n  }\r\n});\r\n```\r\n\r\n### Group Functions ###\r\nHere you can find utilities for Managing, Creating, and Removing Groups.  \r\n\r\n#### Finding a Group ####\r\ngroups.find(groupname, callback)  \r\n\r\n* groupname String\r\n* callback Function (err, res)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().groups.find('crowd-administrators', function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n```\r\n\r\n#### Creating a Group ####\r\ngroups.create(name, description, callback)\r\n\r\n* name String\r\n* description String\r\n* callback Function (err)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().groups.create('test-group', 'Test Description', function(err) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log('Success');\r\n  }\r\n});\r\n```\r\n\r\n#### Removing a Group ####\r\ngroups.remove(name, callback)\r\n\r\n* name String\r\n* callback Function (err)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().groups.remove('test-group', function (err) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log('Success');\r\n  }\r\n```\r\n\r\n#### Adding a User to a Group ####\r\ngroups.addmember(username, group, callback)\r\n\r\n* username String\r\n* group String\r\n* callback Function (err)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().groups.addmember('testuser', 'test-group', function (err) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log('Success');\r\n  }\r\n});\r\n```\r\n\r\n#### Removing a User from a Group ####\r\ngroups.removemember(username, group, callback)\r\n\r\n* username String\r\n* group String\r\n* callback Function (err)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().groups.removemember('testuser', 'test-group', function (err) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log('Success');\r\n  }\r\n});\r\n```\r\n\r\n#### Find the Direct Members of a Group ####\r\ngroups.directmembers(groupname, callback)\r\n\r\n* groupname String\r\n* callback Function (err, res)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().groups.find('test-group', function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n```\r\n\r\n#### Find the Nested Members of a Group ####\r\ngroups.nestedmembers(groupname, callback)\r\n\r\n* groupname String\r\n* callback Function (err, res)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().groups.nestedmembers('test-group', function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n```\r\n\r\n### Session Functions ###\r\nProvides SSO Functionality\r\n\r\n#### Create a new Session ####\r\nsession.create(username, password, callback)\r\n\r\n* username String\r\n* password String\r\n* remote_addr String (optional)\r\n* callback Function (err, res)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().session.create('testuser', 'secret', function (err, token) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(token);\r\n  }\r\n});\r\n```\r\n\r\n#### Authenticate ####\r\nsession.authenticate(token, remote_addr, callback)\r\n\r\n* token String\r\n* remote_addr String (optional)\r\n* callback Function (err, res)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().session.authenticate('xAbCd345', '192.168.1.100', function (err, res) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log(res);\r\n  }\r\n});\r\n```\r\n\r\n#### Destroy ####\r\nsession.destroy(token, callback)\r\n\r\n* token String\r\n* callback Function (err)\r\n\r\n```javascript\r\nAtlassianCrowd.instance().session.destroy('xAbCd345', function (err) {\r\n  if(err) {\r\n    throw err;\r\n  }\r\n  else {\r\n    console.log('Successfully Destroyed Session');\r\n  }\r\n});\r\n```\r\n\r\n## How to allow your application to communicate with Crowd?\r\n\r\nUse Crowd's 'Add Application' Wizard:\r\nhttps://confluence.atlassian.com/display/CROWD/Adding+an+Application#AddinganApplication-add\r\n\r\n## Kudos\r\n\r\nUses npm package <code>atlassian-crowd</code>. Instead of using v0.4.4 from April 2013, uses last commit with a lot of improvements including solid error handling. \r\nhttps://www.npmjs.com/package/atlassian-crowd\r\n\r\nSpecial thanks to Ben Y.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}